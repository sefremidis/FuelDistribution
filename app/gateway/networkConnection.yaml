---
#
# The network connection profile provides client applications the information about the target
# blockchain network that are necessary for the applications to interact with it. These are all
# knowledge that must be acquired from out-of-band sources. This file provides such a source.
#
name: "byfn"

#
# Any properties with an "x-" prefix will be treated as application-specific, exactly like how naming
# in HTTP headers or swagger properties work. The SDK will simply ignore these fields and leave
# them for the applications to process. This is a mechanism for different components of an application
# to exchange information that are not part of the standard schema described below. In particular,
# the "x-type" property with the "hlfv1" value example below is used by Hyperledger Composer to
# determine the type of Fabric networks (v0.6 vs. v1.0) it needs to work with.
#
#x-type: "hlfv1"

#
# Describe what the target network is/does.
#
description: "Connection profile for 'Fuel & Gas supply chain management network'"

#
# Schema version of the content. Used by the SDK to apply the corresponding parsing rules.
#
version: "1.0"



client:
    organization: OrdererOrg
#
#
#
#
# [Optional]. But most apps would have this section so that channel objects can be constructed
# based on the content below. If an app is creating channels, then it likely will not need this
# section.
#
channels:
  # name of the channel
  mychannel:
    # Required. list of orderers designated by the application to use for transactions on this
    # channel. This list can be a result of access control ("org1" can only access "ordererA"), or
    # operational decisions to share loads from applications among the orderers.  The values must
    # be "names" of orgs defined under "organizations/peers"
    orderers:
      - orderer.example.com

    # Required. list of peers from participating orgs
    peers:
      peer0.org1.example.com:
        # [Optional]. will this peer be sent transaction proposals for endorsement? The peer must
        # have the chaincode installed. The app can also use this property to decide which peers
        # to send the chaincode install request. Default: true
        endorsingPeer: true

        # [Optional]. will this peer be sent query proposals? The peer must have the chaincode
        # installed. The app can also use this property to decide which peers to send the
        # chaincode install request. Default: true
        chaincodeQuery: true

        # [Optional]. will this peer be sent query proposals that do not require chaincodes, like
        # queryBlock(), queryTransaction(), etc. Default: true
        ledgerQuery: true

        # [Optional]. will this peer be the target of the SDK's listener registration? All peers can
        # produce events but the app typically only needs to connect to one to listen to events.
        # Default: true
        eventSource: true

    peer0.org2.example.com:
        endorsingPeer: true
        chaincodeQuery: true
        ledgerQuery: true
        eventSource: true
        #peer0.org3.example.com:
        #endorsingPeer: true
        #chaincodeQuery: true
        #ledgerQuery: true
        #eventSource: true
        #peer0.org4.example.com:
        #endorsingPeer: true
        #chaincodeQuery: true
        #ledgerQuery: true
        #eventSource: true
        #peer0.org5.example.com:
        #endorsingPeer: true
        #chaincodeQuery: true
        #ledgerQuery: true
        #eventSource: true
        #peer0.org6.example.com:
        #endorsingPeer: true
        #chaincodeQuery: true
        #ledgerQuery: true
        #eventSource: true

# list of participating organizations in this network
#
organizations:
  OrdererOrg:
      mspid: OrdererMSP

      peers: 
        - orderer.example.com
      adminPrivateKey:
        path: ../../crypto-config/ordererOrganizations/example.com/users/Admin@example.com/msp/keystore/eb151e3a21603fac72d8d81ef1bd45950193b7306e03b73dec603fcfc30fa886_sk
      signedCert:
        ../../crypto-config/ordererOrganizations/example.com/users/Admin@example.com/msp/signcerts/Admin@example.com-cert.pem
  Org1:
    mspid: Org1MSP

    peers:
      - peer0.org1.example.com
      - peer1.org1.example.com
    adminPrivateKey:
        path: ../../crypto-config/peerOrganizations/org1.example.com/users/Admin@org1.example.com/msp/keystore/ba2caac2ba72b9fd9b047fc51fbf82a76acbe56facbca24fa1af77c1cbcbb5cc_sk
    signedCert:
        path: ../../crypto-config/peerOrganizations/org1.example.com/users/Admin@org1.example.com/msp/signcerts/Admin@org1.example.com-cert.pem
    # [Optional]. Certificate Authorities issue certificates for identification purposes in a Fabric based
    # network. Typically certificates provisioning is done in a separate process outside of the
    # runtime network. Fabric-CA is a special certificate authority that provides a REST APIs for
    # dynamic certificate management (enroll, revoke, re-enroll). The following section is only for
    # Fabric-CA servers.
  Org2:
    mspid: Org2MSP

    peers:
      - peer0.org2.example.com
      - peer1.org2.example.com
    adminPrivateKey:
        path: ../../crypto-config/peerOrganizations/org2.example.com/users/Admin@org2.example.com/msp/keystore/9a06770193bd2bb70b543ec2951e3f5a013049670ed10f400dbd81f421ba02e5_sk
    signedCert:
        path: ../../crypto-config/peerOrganizations/org2.example.com/users/Admin@org2.example.com/msp/signcerts/Admin@org2.example.com-cert.pem

  Org3:
    mspid: Org3MSP

    peers:
      - peer0.org3.example.com
      - peer1.org3.example.com
    adminPrivateKey:
        path: ../../crypto-config/peerOrganizations/org3.example.com/users/Admin@org3.example.com/msp/keystore/ff1e795eb41e2a34c9f32869c3370fc811a9a3673be97d889f07c9f81a4e8c30_sk
    signedCert:
        path: ../../crypto-config/peerOrganizations/org3.example.com/users/Admin@org3.example.com/msp/signcerts/Admin@org3.example.com-cert.pem
  Org4:
    mspid: Org4MSP

    peers:
      - peer0.org4.example.com
      - peer1.org4.example.com
    adminPrivateKey:
        path: ../../crypto-config/peerOrganizations/org4.example.com/users/Admin@org4.example.com/msp/keystore/e41d46070ce4e21bf9cc0227a2fda5b2850653807025e40093d00bd7319e514a_sk
    signedCert:
        path: ../../crypto-config/peerOrganizations/org4.example.com/users/Admin@org4.example.com/msp/signcerts/Admin@org4.example.com-cert.pem
  Org5:
    mspid: Org5MSP

    peers:
      - peer0.org5.example.com
      - peer1.org5.example.com
    adminPrivateKey:
        path: ../../crypto-config/peerOrganizations/org5.example.com/users/Admin@org5.example.com/msp/keystore/c42a7fdd6959464a9c095d06d4404c110e84821e6ff2289f23039b9ac3acd70a_sk
    signedCert:
        path: ../../crypto-config/peerOrganizations/org5.example.com/users/Admin@org5.example.com/msp/signcerts/Admin@org5.example.com-cert.pem
  Org6:
    mspid: Org6MSP

    peers:
      - peer0.org6.example.com
      - peer1.org6.example.com
    adminPrivateKey:
        path: ../../crypto-config/peerOrganizations/org6.example.com/users/Admin@org6.example.com/msp/keystore/f65f39c252877a2753f70e2fac21ad213c50c7b4cce5ff1e10ff9c01cf7dff57_sk
    signedCert:
        path: ../../crypto-config/peerOrganizations/org6.example.com/users/Admin@org6.example.com/msp/signcerts/Admin@org6.example.com-cert.pem
#
# List of orderers to send transaction and channel create/update requests to. For the time
# being only one orderer is needed. If more than one is defined, which one get used by the
# SDK is implementation specific. Consult each SDK's documentation for its handling of orderers.
#
orderers:
  orderer.example.com:
    url: grpcs://localhost:7050

    # these are standard properties defined by the gRPC library
    # they will be passed in as-is to gRPC client constructor
    grpcOptions:
      ssl-target-name-override: orderer.example.com
    tlsCACerts:
        path: ../../crypto-config/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem

#
# List of peers to send various requests to, including endorsement, query
# and event listener registration.
#
peers:
  #Org1
  peer0.org1.example.com:
    # this URL is used to send endorsement and query requests
    url: grpcs://localhost:7051

    grpcOptions:
      ssl-target-name-override: peer0.org1.example.com
      request-timeout: 120001
    tlsCACerts:
        path: ../../crypto-config/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/msp/tlscacerts/tlsca.org1.example.com-cert.pem
  peer1.org1.example.com:
    # this URL is used to send endorsement and query requests
    url: grpcs://localhost:8051

    grpcOptions:
      ssl-target-name-override: peer1.org1.example.com
      request-timeout: 120001
    tlsCACerts:
        path: ../../crypto-config/peerOrganizations/org1.example.com/peers/peer1.org1.example.com/msp/tlscacerts/tlsca.org1.example.com-cert.pem
  #Org2
  peer0.org2.example.com:
    url: grpcs://localhost:9051

    grpcOptions:
      ssl-target-name-override: peer0.org2.example.com
      request-timeout: 120001
    tlsCACerts:
        path: ../../crypto-config/peerOrganizations/org2.example.com/peers/peer0.org2.example.com/msp/tlscacerts/tlsca.org2.example.com-cert.pem
  peer1.org2.example.com:
    url: grpcs://localhost:10051

    grpcOptions:
      ssl-target-name-override: peer1.org2.example.com
      request-timeout: 120001
    tlsCACerts:
        path: ../../crypto-config/peerOrganizations/org2.example.com/peers/peer1.org2.example.com/msp/tlscacerts/tlsca.org2.example.com-cert.pem
  #Org3
  peer0.org3.example.com:
    url: grpcs://localhost:11051

    grpcOptions:
      ssl-target-name-override: peer0.org3.example.com
      request-timeout: 120001
    tlsCACerts:
        path: ../../crypto-config/peerOrganizations/org3.example.com/peers/peer0.org3.example.com/msp/tlscacerts/tlsca.org3.example.com-cert.pem
  peer1.org3.example.com:
    url: grpcs://localhost:12051

    grpcOptions:
      ssl-target-name-override: peer1.org3.example.com
      request-timeout: 120001
    tlsCACerts:
        path: ../../crypto-config/peerOrganizations/org3.example.com/peers/peer1.org3.example.com/msp/tlscacerts/tlsca.org3.example.com-cert.pem
  #Org4
  peer0.org4.example.com:
    url: grpcs://localhost:13051

    grpcOptions:
      ssl-target-name-override: peer0.org4.example.com
      request-timeout: 120001
    tlsCACerts:
        path: ../../crypto-config/peerOrganizations/org4.example.com/peers/peer0.org4.example.com/msp/tlscacerts/tlsca.org4.example.com-cert.pem
  peer1.org4.example.com:
    url: grpcs://localhost:14051

    grpcOptions:
      ssl-target-name-override: peer1.org4.example.com
      request-timeout: 120001
    tlsCACerts:
        path: ../../crypto-config/peerOrganizations/org4.example.com/peers/peer1.org4.example.com/msp/tlscacerts/tlsca.org4.example.com-cert.pem
  #Org5
  peer0.org5.example.com:
    url: grpcs://localhost:15051

    grpcOptions:
      ssl-target-name-override: peer0.org5.example.com
      request-timeout: 120001
    tlsCACerts:
        path: ../../crypto-config/peerOrganizations/org5.example.com/peers/peer0.org5.example.com/msp/tlscacerts/tlsca.org5.example.com-cert.pem
  peer1.org5.example.com:
    url: grpcs://localhost:16051

    grpcOptions:
      ssl-target-name-override: peer1.org5.example.com
      request-timeout: 120001
    tlsCACerts:
        path: ../../crypto-config/peerOrganizations/org5.example.com/peers/peer1.org5.example.com/msp/tlscacerts/tlsca.org5.example.com-cert.pem
  #Org6
  peer0.org6.example.com:
    url: grpcs://localhost:17051

    grpcOptions:
      ssl-target-name-override: peer0.org6.example.com
      request-timeout: 120001
    tlsCACerts:
        path: ../../crypto-config/peerOrganizations/org6.example.com/peers/peer0.org6.example.com/msp/tlscacerts/tlsca.org6.example.com-cert.pem
  peer1.org6.example.com:
    url: grpcs://localhost:18051

    grpcOptions:
      ssl-target-name-override: peer1.org6.example.com
      request-timeout: 120001
    tlsCACerts:
        path: ../../crypto-config/peerOrganizations/org6.example.com/peers/peer1.org6.example.com/msp/tlscacerts/tlsca.org6.example.com-cert.pem

# Fabric-CA is a special kind of Certificate Authority provided by Hyperledger Fabric which allows
# certificate management to be done via REST APIs. Application may choose to use a standard
# Certificate Authority instead of Fabric-CA, in which case this section would not be specified.
#
#certificateAuthorities:
#ca-org1:
#url: http://localhost:7054
## the properties specified under this object are passed to the 'http' client verbatim when
## making the request to the Fabric-CA server
#httpOptions:
#verify: false
#
## Fabric-CA supports dynamic user enrollment via REST APIs. A "root" user, a.k.a registrar, is
## needed to enroll and invoke new users.
#registrar:
#- enrollId: admin
#enrollSecret: adminpw
## [Optional] The optional name of the CA.
#    caName: ca-org1
